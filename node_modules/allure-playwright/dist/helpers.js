"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LabelName = exports.allure = exports.ALLURE_METADATA_CONTENT_TYPE = void 0;
const test_1 = __importDefault(require("@playwright/test"));
const allure_js_commons_1 = require("allure-js-commons");
exports.ALLURE_METADATA_CONTENT_TYPE = "application/vnd.allure.metadata+json";
class allure {
    static addMetadataAttachment(metadata) {
        test_1.default.info().attach("allure-metadata.json", {
            contentType: exports.ALLURE_METADATA_CONTENT_TYPE,
            body: Buffer.from(JSON.stringify(metadata), "utf8"),
        });
    }
    static label(label) {
        this.addMetadataAttachment({
            labels: Array.isArray(label) ? label : [label],
        });
    }
    static description(value) {
        this.addMetadataAttachment({
            description: value,
        });
    }
    static link(link) {
        this.addMetadataAttachment({
            links: Array.isArray(link) ? link : [link],
        });
    }
    static id(id) {
        this.label({
            value: id,
            name: allure_js_commons_1.LabelName.AS_ID,
        });
    }
    static epic(epic) {
        this.label({
            name: allure_js_commons_1.LabelName.EPIC,
            value: epic,
        });
    }
    static feature(epic) {
        this.label({
            name: allure_js_commons_1.LabelName.FEATURE,
            value: epic,
        });
    }
    static story(story) {
        this.label({
            name: allure_js_commons_1.LabelName.STORY,
            value: story,
        });
    }
    static suite(name) {
        this.label({
            name: allure_js_commons_1.LabelName.SUITE,
            value: name,
        });
    }
    static parentSuite(name) {
        this.label({
            name: allure_js_commons_1.LabelName.PARENT_SUITE,
            value: name,
        });
    }
    static subSuite(name) {
        this.label({
            name: allure_js_commons_1.LabelName.SUB_SUITE,
            value: name,
        });
    }
    static owner(owner) {
        this.label({
            name: allure_js_commons_1.LabelName.OWNER,
            value: owner,
        });
    }
    static severity(severity) {
        this.label({
            name: allure_js_commons_1.LabelName.SEVERITY,
            value: severity,
        });
    }
    static tag(tag) {
        this.label({
            name: allure_js_commons_1.LabelName.TAG,
            value: tag,
        });
    }
    static issue(issueData) {
        this.link({
            url: issueData.url,
            name: issueData.name,
            type: allure_js_commons_1.LinkType.ISSUE,
        });
    }
    static tms(issueData) {
        this.link({
            url: issueData.url,
            name: issueData.name,
            type: allure_js_commons_1.LinkType.TMS,
        });
    }
}
exports.allure = allure;
var allure_js_commons_2 = require("allure-js-commons");
Object.defineProperty(exports, "LabelName", { enumerable: true, get: function () { return allure_js_commons_2.LabelName; } });
//# sourceMappingURL=helpers.js.map